// Generated by gencpp from file ed_gui_server/QueryEntitiesResponse.msg
// DO NOT EDIT!


#ifndef ED_GUI_SERVER_MESSAGE_QUERYENTITIESRESPONSE_H
#define ED_GUI_SERVER_MESSAGE_QUERYENTITIESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ed_gui_server/EntityInfo.h>

namespace ed_gui_server
{
template <class ContainerAllocator>
struct QueryEntitiesResponse_
{
  typedef QueryEntitiesResponse_<ContainerAllocator> Type;

  QueryEntitiesResponse_()
    : entities()
    , error_msg()  {
    }
  QueryEntitiesResponse_(const ContainerAllocator& _alloc)
    : entities(_alloc)
    , error_msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ed_gui_server::EntityInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ed_gui_server::EntityInfo_<ContainerAllocator> >::other >  _entities_type;
  _entities_type entities;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  _error_msg_type error_msg;





  typedef boost::shared_ptr< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct QueryEntitiesResponse_

typedef ::ed_gui_server::QueryEntitiesResponse_<std::allocator<void> > QueryEntitiesResponse;

typedef boost::shared_ptr< ::ed_gui_server::QueryEntitiesResponse > QueryEntitiesResponsePtr;
typedef boost::shared_ptr< ::ed_gui_server::QueryEntitiesResponse const> QueryEntitiesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ed_gui_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ed_gui_server': ['/home/gosse/ropod-project-software/catkin_workspace/src/functionalities/ED/ed_gui_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdc43fcb5a92d7522e375990fa686360";
  }

  static const char* value(const ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdc43fcb5a92d752ULL;
  static const uint64_t static_value2 = 0x2e375990fa686360ULL;
};

template<class ContainerAllocator>
struct DataType< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed_gui_server/QueryEntitiesResponse";
  }

  static const char* value(const ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "EntityInfo[] entities\n\
\n\
\n\
string error_msg\n\
\n\
\n\
================================================================================\n\
MSG: ed_gui_server/EntityInfo\n\
string id\n\
string type\n\
float32 existence_probability\n\
bool has_pose\n\
geometry_msgs/Pose pose\n\
\n\
# Number indicating the revision of the mesh. If this number\n\
# has changed, the mesh has changed (and should be queried\n\
# again).\n\
# Special case: mesh_revision == 0 means no mesh available.\n\
uint32 mesh_revision\n\
\n\
Color color\n\
\n\
Polygon polygon\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: ed_gui_server/Color\n\
uint8 r\n\
uint8 g\n\
uint8 b\n\
uint8 a\n\
\n\
================================================================================\n\
MSG: ed_gui_server/Polygon\n\
float32 z_min\n\
float32 z_max\n\
float32[] xs\n\
float32[] ys\n\
";
  }

  static const char* value(const ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.entities);
      stream.next(m.error_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryEntitiesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ed_gui_server::QueryEntitiesResponse_<ContainerAllocator>& v)
  {
    s << indent << "entities[]" << std::endl;
    for (size_t i = 0; i < v.entities.size(); ++i)
    {
      s << indent << "  entities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ed_gui_server::EntityInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.entities[i]);
    }
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ED_GUI_SERVER_MESSAGE_QUERYENTITIESRESPONSE_H
