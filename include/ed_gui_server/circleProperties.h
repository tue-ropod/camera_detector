// Generated by gencpp from file ed_gui_server/circleProperties.msg
// DO NOT EDIT!


#ifndef ED_GUI_SERVER_MESSAGE_CIRCLEPROPERTIES_H
#define ED_GUI_SERVER_MESSAGE_CIRCLEPROPERTIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>

namespace ed_gui_server
{
template <class ContainerAllocator>
struct circleProperties_
{
  typedef circleProperties_<ContainerAllocator> Type;

  circleProperties_()
    : probability(0.0)
    , pose()
    , xPosStdDev(0.0)
    , yPosStdDev(0.0)
    , radius(0.0)
    , radiusStdDev(0.0)
    , vel()  {
    }
  circleProperties_(const ContainerAllocator& _alloc)
    : probability(0.0)
    , pose(_alloc)
    , xPosStdDev(0.0)
    , yPosStdDev(0.0)
    , radius(0.0)
    , radiusStdDev(0.0)
    , vel(_alloc)  {
  (void)_alloc;
    }



   typedef float _probability_type;
  _probability_type probability;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _xPosStdDev_type;
  _xPosStdDev_type xPosStdDev;

   typedef float _yPosStdDev_type;
  _yPosStdDev_type yPosStdDev;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _radiusStdDev_type;
  _radiusStdDev_type radiusStdDev;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::ed_gui_server::circleProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ed_gui_server::circleProperties_<ContainerAllocator> const> ConstPtr;

}; // struct circleProperties_

typedef ::ed_gui_server::circleProperties_<std::allocator<void> > circleProperties;

typedef boost::shared_ptr< ::ed_gui_server::circleProperties > circlePropertiesPtr;
typedef boost::shared_ptr< ::ed_gui_server::circleProperties const> circlePropertiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ed_gui_server::circleProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ed_gui_server::circleProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ed_gui_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ed_gui_server': ['/home/gosse/ropod-project-software/catkin_workspace/src/functionalities/ED/ed_gui_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::circleProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::circleProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::circleProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::circleProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::circleProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::circleProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ed_gui_server::circleProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e9837da1d996867ebd233ab79ddc846";
  }

  static const char* value(const ::ed_gui_server::circleProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e9837da1d996867ULL;
  static const uint64_t static_value2 = 0xebd233ab79ddc846ULL;
};

template<class ContainerAllocator>
struct DataType< ::ed_gui_server::circleProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed_gui_server/circleProperties";
  }

  static const char* value(const ::ed_gui_server::circleProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ed_gui_server::circleProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 probability\n\
\n\
geometry_msgs/Pose pose\n\
float32 xPosStdDev\n\
float32 yPosStdDev\n\
\n\
float32 radius\n\
float32 radiusStdDev\n\
\n\
geometry_msgs/Vector3 vel\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ed_gui_server::circleProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ed_gui_server::circleProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probability);
      stream.next(m.pose);
      stream.next(m.xPosStdDev);
      stream.next(m.yPosStdDev);
      stream.next(m.radius);
      stream.next(m.radiusStdDev);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct circleProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ed_gui_server::circleProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ed_gui_server::circleProperties_<ContainerAllocator>& v)
  {
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "xPosStdDev: ";
    Printer<float>::stream(s, indent + "  ", v.xPosStdDev);
    s << indent << "yPosStdDev: ";
    Printer<float>::stream(s, indent + "  ", v.yPosStdDev);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "radiusStdDev: ";
    Printer<float>::stream(s, indent + "  ", v.radiusStdDev);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ED_GUI_SERVER_MESSAGE_CIRCLEPROPERTIES_H
