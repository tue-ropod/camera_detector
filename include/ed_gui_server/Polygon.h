// Generated by gencpp from file ed_gui_server/Polygon.msg
// DO NOT EDIT!


#ifndef ED_GUI_SERVER_MESSAGE_POLYGON_H
#define ED_GUI_SERVER_MESSAGE_POLYGON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ed_gui_server
{
template <class ContainerAllocator>
struct Polygon_
{
  typedef Polygon_<ContainerAllocator> Type;

  Polygon_()
    : z_min(0.0)
    , z_max(0.0)
    , xs()
    , ys()  {
    }
  Polygon_(const ContainerAllocator& _alloc)
    : z_min(0.0)
    , z_max(0.0)
    , xs(_alloc)
    , ys(_alloc)  {
  (void)_alloc;
    }



   typedef float _z_min_type;
  _z_min_type z_min;

   typedef float _z_max_type;
  _z_max_type z_max;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _xs_type;
  _xs_type xs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ys_type;
  _ys_type ys;





  typedef boost::shared_ptr< ::ed_gui_server::Polygon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ed_gui_server::Polygon_<ContainerAllocator> const> ConstPtr;

}; // struct Polygon_

typedef ::ed_gui_server::Polygon_<std::allocator<void> > Polygon;

typedef boost::shared_ptr< ::ed_gui_server::Polygon > PolygonPtr;
typedef boost::shared_ptr< ::ed_gui_server::Polygon const> PolygonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ed_gui_server::Polygon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ed_gui_server::Polygon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ed_gui_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ed_gui_server': ['/home/gosse/ropod-project-software/catkin_workspace/src/functionalities/ED/ed_gui_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::Polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::Polygon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::Polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::Polygon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::Polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::Polygon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ed_gui_server::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dca8a231720a3f194ef7e286bf1747db";
  }

  static const char* value(const ::ed_gui_server::Polygon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdca8a231720a3f19ULL;
  static const uint64_t static_value2 = 0x4ef7e286bf1747dbULL;
};

template<class ContainerAllocator>
struct DataType< ::ed_gui_server::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed_gui_server/Polygon";
  }

  static const char* value(const ::ed_gui_server::Polygon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ed_gui_server::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 z_min\n\
float32 z_max\n\
float32[] xs\n\
float32[] ys\n\
";
  }

  static const char* value(const ::ed_gui_server::Polygon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ed_gui_server::Polygon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.z_min);
      stream.next(m.z_max);
      stream.next(m.xs);
      stream.next(m.ys);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Polygon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ed_gui_server::Polygon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ed_gui_server::Polygon_<ContainerAllocator>& v)
  {
    s << indent << "z_min: ";
    Printer<float>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<float>::stream(s, indent + "  ", v.z_max);
    s << indent << "xs[]" << std::endl;
    for (size_t i = 0; i < v.xs.size(); ++i)
    {
      s << indent << "  xs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xs[i]);
    }
    s << indent << "ys[]" << std::endl;
    for (size_t i = 0; i < v.ys.size(); ++i)
    {
      s << indent << "  ys[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ys[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ED_GUI_SERVER_MESSAGE_POLYGON_H
