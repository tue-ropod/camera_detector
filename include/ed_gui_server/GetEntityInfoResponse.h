// Generated by gencpp from file ed_gui_server/GetEntityInfoResponse.msg
// DO NOT EDIT!


#ifndef ED_GUI_SERVER_MESSAGE_GETENTITYINFORESPONSE_H
#define ED_GUI_SERVER_MESSAGE_GETENTITYINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ed_gui_server
{
template <class ContainerAllocator>
struct GetEntityInfoResponse_
{
  typedef GetEntityInfoResponse_<ContainerAllocator> Type;

  GetEntityInfoResponse_()
    : type()
    , property_names()
    , property_values()
    , measurement_image()
    , measurement_image_unmasked()
    , affordances()  {
    }
  GetEntityInfoResponse_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , property_names(_alloc)
    , property_values(_alloc)
    , measurement_image(_alloc)
    , measurement_image_unmasked(_alloc)
    , affordances(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _property_names_type;
  _property_names_type property_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _property_values_type;
  _property_values_type property_values;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _measurement_image_type;
  _measurement_image_type measurement_image;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _measurement_image_unmasked_type;
  _measurement_image_unmasked_type measurement_image_unmasked;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _affordances_type;
  _affordances_type affordances;





  typedef boost::shared_ptr< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetEntityInfoResponse_

typedef ::ed_gui_server::GetEntityInfoResponse_<std::allocator<void> > GetEntityInfoResponse;

typedef boost::shared_ptr< ::ed_gui_server::GetEntityInfoResponse > GetEntityInfoResponsePtr;
typedef boost::shared_ptr< ::ed_gui_server::GetEntityInfoResponse const> GetEntityInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ed_gui_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ed_gui_server': ['/home/gosse/ropod-project-software/catkin_workspace/src/functionalities/ED/ed_gui_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "080185f915a1f316539993d80ac16f73";
  }

  static const char* value(const ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x080185f915a1f316ULL;
  static const uint64_t static_value2 = 0x539993d80ac16f73ULL;
};

template<class ContainerAllocator>
struct DataType< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed_gui_server/GetEntityInfoResponse";
  }

  static const char* value(const ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n\
string[] property_names\n\
string[] property_values\n\
uint8[] measurement_image\n\
uint8[] measurement_image_unmasked\n\
string[] affordances\n\
\n\
";
  }

  static const char* value(const ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.property_names);
      stream.next(m.property_values);
      stream.next(m.measurement_image);
      stream.next(m.measurement_image_unmasked);
      stream.next(m.affordances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetEntityInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ed_gui_server::GetEntityInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "property_names[]" << std::endl;
    for (size_t i = 0; i < v.property_names.size(); ++i)
    {
      s << indent << "  property_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.property_names[i]);
    }
    s << indent << "property_values[]" << std::endl;
    for (size_t i = 0; i < v.property_values.size(); ++i)
    {
      s << indent << "  property_values[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.property_values[i]);
    }
    s << indent << "measurement_image[]" << std::endl;
    for (size_t i = 0; i < v.measurement_image.size(); ++i)
    {
      s << indent << "  measurement_image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.measurement_image[i]);
    }
    s << indent << "measurement_image_unmasked[]" << std::endl;
    for (size_t i = 0; i < v.measurement_image_unmasked.size(); ++i)
    {
      s << indent << "  measurement_image_unmasked[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.measurement_image_unmasked[i]);
    }
    s << indent << "affordances[]" << std::endl;
    for (size_t i = 0; i < v.affordances.size(); ++i)
    {
      s << indent << "  affordances[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.affordances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ED_GUI_SERVER_MESSAGE_GETENTITYINFORESPONSE_H
